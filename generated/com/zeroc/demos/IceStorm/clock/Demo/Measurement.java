//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `Clock.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.demos.IceStorm.clock.Demo;

public class Measurement implements java.lang.Cloneable,
                                    java.io.Serializable
{
    public String tower;

    public float windSpeed;

    public short windDirection;

    public float temperature;

    public Measurement()
    {
        this.tower = "";
    }

    public Measurement(String tower, float windSpeed, short windDirection, float temperature)
    {
        this.tower = tower;
        this.windSpeed = windSpeed;
        this.windDirection = windDirection;
        this.temperature = temperature;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Measurement r = null;
        if(rhs instanceof Measurement)
        {
            r = (Measurement)rhs;
        }

        if(r != null)
        {
            if(this.tower != r.tower)
            {
                if(this.tower == null || r.tower == null || !this.tower.equals(r.tower))
                {
                    return false;
                }
            }
            if(this.windSpeed != r.windSpeed)
            {
                return false;
            }
            if(this.windDirection != r.windDirection)
            {
                return false;
            }
            if(this.temperature != r.temperature)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Demo::Measurement");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, tower);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, windSpeed);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, windDirection);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, temperature);
        return h_;
    }

    public Measurement clone()
    {
        Measurement c = null;
        try
        {
            c = (Measurement)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.tower);
        ostr.writeFloat(this.windSpeed);
        ostr.writeShort(this.windDirection);
        ostr.writeFloat(this.temperature);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.tower = istr.readString();
        this.windSpeed = istr.readFloat();
        this.windDirection = istr.readShort();
        this.temperature = istr.readFloat();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Measurement v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Measurement ice_read(com.zeroc.Ice.InputStream istr)
    {
        Measurement v = new Measurement();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Measurement> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Measurement v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<Measurement> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(Measurement.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Measurement _nullMarshalValue = new Measurement();

    /** @hidden */
    public static final long serialVersionUID = 776436215L;
}
